I am a passionate, self-motivated with the ability to motivate others. An experienced and seasoned DevOps Engineer.
*I have Configured, patch and updated a large deployment of RedHat Linux and ubuntu instances with Ansible Automation
*Implemented AWS solutions using EC2, S3, RDS, EBS, Elastic Load Balancer, Auto scaling groups
*Design roles and groups using AWS and Access Management (IAM)
*Created monitors, alarms, and notifications for EC2 hosts using Cloud Watch
*Designed and implemented a continuous build-test-deployment CI/CD system with multiple component pipelines using Jenkins to support weekly releases based on business needs
*Worked on deployment automation of all the micro services to pull image from the private docker registry and deploy to Kubernetes cluster.
*Used Jenkins pipelines to drive all micro services builds out to the Docker registry and then deployed to Kubernetes, Created Pods and managed using Kubernetes.
*Integrated SonarQube plugins in Jenkins for automated testing and for Code quality check. I have over 4yearsâ€™ experience as a team player and security-driven DevOps and Cloud Platform Engineer with experience in systems administration, software configuration management, cloud integration, using various CI/CD and SCM tools for end-to-end automation & deployment of software to different environments. Experienced in implementing security best practices with hands on experience in containerization and orchestration of microservice applications into different environments leveraging various DevOps automation tools. Familiar with agile SDLC methodologies. I have supported countless AWS cloud instances running Ubuntu, Redhat and windows environments. - I have also Provisioned infrastructure in AWS using Terraform, Configured, patch and updated a large deployment of RedHat Linux and ubuntu instances and deployed applications into Kubernetes cluster ( Kubeadm , Kops and EKS) - Design roles and groups using AWS Identity and Access Management (IAM) - Created monitors, alarms, and notifications for EC2 hosts using Cloud Watch. Used Jenkins pipelines to drive all micro services builds out to the Docker registry and then deployed to Kubernetes, Created Pods and managed using Kubernetes.
